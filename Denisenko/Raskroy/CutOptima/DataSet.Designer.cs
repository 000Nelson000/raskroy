//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Denisenko.Cutting.CutOptima {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet : System.Data.DataSet {
        
        private DetailsListsDataTable tableDetailsLists;
        
        private DetailsListsContentsDataTable tableDetailsListsContents;
        
        private ReferenceDetailsDataTable tableReferenceDetails;
        
        private DetailsDataTable tableDetails;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DetailsLists"] != null)) {
                    base.Tables.Add(new DetailsListsDataTable(ds.Tables["DetailsLists"]));
                }
                if ((ds.Tables["DetailsListsContents"] != null)) {
                    base.Tables.Add(new DetailsListsContentsDataTable(ds.Tables["DetailsListsContents"]));
                }
                if ((ds.Tables["ReferenceDetails"] != null)) {
                    base.Tables.Add(new ReferenceDetailsDataTable(ds.Tables["ReferenceDetails"]));
                }
                if ((ds.Tables["Details"] != null)) {
                    base.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailsListsDataTable DetailsLists {
            get {
                return this.tableDetailsLists;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailsListsContentsDataTable DetailsListsContents {
            get {
                return this.tableDetailsListsContents;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReferenceDetailsDataTable ReferenceDetails {
            get {
                return this.tableReferenceDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailsDataTable Details {
            get {
                return this.tableDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet cln = ((DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DetailsLists"] != null)) {
                    base.Tables.Add(new DetailsListsDataTable(ds.Tables["DetailsLists"]));
                }
                if ((ds.Tables["DetailsListsContents"] != null)) {
                    base.Tables.Add(new DetailsListsContentsDataTable(ds.Tables["DetailsListsContents"]));
                }
                if ((ds.Tables["ReferenceDetails"] != null)) {
                    base.Tables.Add(new ReferenceDetailsDataTable(ds.Tables["ReferenceDetails"]));
                }
                if ((ds.Tables["Details"] != null)) {
                    base.Tables.Add(new DetailsDataTable(ds.Tables["Details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDetailsLists = ((DetailsListsDataTable)(base.Tables["DetailsLists"]));
            if ((initTable == true)) {
                if ((this.tableDetailsLists != null)) {
                    this.tableDetailsLists.InitVars();
                }
            }
            this.tableDetailsListsContents = ((DetailsListsContentsDataTable)(base.Tables["DetailsListsContents"]));
            if ((initTable == true)) {
                if ((this.tableDetailsListsContents != null)) {
                    this.tableDetailsListsContents.InitVars();
                }
            }
            this.tableReferenceDetails = ((ReferenceDetailsDataTable)(base.Tables["ReferenceDetails"]));
            if ((initTable == true)) {
                if ((this.tableReferenceDetails != null)) {
                    this.tableReferenceDetails.InitVars();
                }
            }
            this.tableDetails = ((DetailsDataTable)(base.Tables["Details"]));
            if ((initTable == true)) {
                if ((this.tableDetails != null)) {
                    this.tableDetails.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDetailsLists = new DetailsListsDataTable();
            base.Tables.Add(this.tableDetailsLists);
            this.tableDetailsListsContents = new DetailsListsContentsDataTable();
            base.Tables.Add(this.tableDetailsListsContents);
            this.tableReferenceDetails = new ReferenceDetailsDataTable();
            base.Tables.Add(this.tableReferenceDetails);
            this.tableDetails = new DetailsDataTable();
            base.Tables.Add(this.tableDetails);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetailsLists() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetailsListsContents() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReferenceDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet ds = new DataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DetailsListsRowChangeEventHandler(object sender, DetailsListsRowChangeEvent e);
        
        public delegate void DetailsListsContentsRowChangeEventHandler(object sender, DetailsListsContentsRowChangeEvent e);
        
        public delegate void ReferenceDetailsRowChangeEventHandler(object sender, ReferenceDetailsRowChangeEvent e);
        
        public delegate void DetailsRowChangeEventHandler(object sender, DetailsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailsListsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDetailsListID;
            
            private System.Data.DataColumn columnRemarks;
            
            private System.Data.DataColumn columnOrderID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsDataTable() {
                this.TableName = "DetailsLists";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsListsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailsListsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DetailsListIDColumn {
                get {
                    return this.columnDetailsListID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRow this[int index] {
                get {
                    return ((DetailsListsRow)(this.Rows[index]));
                }
            }
            
            public event DetailsListsRowChangeEventHandler DetailsListsRowChanging;
            
            public event DetailsListsRowChangeEventHandler DetailsListsRowChanged;
            
            public event DetailsListsRowChangeEventHandler DetailsListsRowDeleting;
            
            public event DetailsListsRowChangeEventHandler DetailsListsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailsListsRow(DetailsListsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRow AddDetailsListsRow(int DetailsListID, string Remarks, int OrderID) {
                DetailsListsRow rowDetailsListsRow = ((DetailsListsRow)(this.NewRow()));
                rowDetailsListsRow.ItemArray = new object[] {
                        DetailsListID,
                        Remarks,
                        OrderID};
                this.Rows.Add(rowDetailsListsRow);
                return rowDetailsListsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRow FindByDetailsListID(int DetailsListID) {
                return ((DetailsListsRow)(this.Rows.Find(new object[] {
                            DetailsListID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DetailsListsDataTable cln = ((DetailsListsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DetailsListsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetailsListID = base.Columns["DetailsListID"];
                this.columnRemarks = base.Columns["Remarks"];
                this.columnOrderID = base.Columns["OrderID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetailsListID = new System.Data.DataColumn("DetailsListID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailsListID);
                this.columnRemarks = new System.Data.DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
                this.columnOrderID = new System.Data.DataColumn("OrderID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDetailsListID}, true));
                this.columnDetailsListID.AllowDBNull = false;
                this.columnDetailsListID.Unique = true;
                this.columnRemarks.MaxLength = 1073741823;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRow NewDetailsListsRow() {
                return ((DetailsListsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DetailsListsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DetailsListsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailsListsRowChanged != null)) {
                    this.DetailsListsRowChanged(this, new DetailsListsRowChangeEvent(((DetailsListsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailsListsRowChanging != null)) {
                    this.DetailsListsRowChanging(this, new DetailsListsRowChangeEvent(((DetailsListsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailsListsRowDeleted != null)) {
                    this.DetailsListsRowDeleted(this, new DetailsListsRowChangeEvent(((DetailsListsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailsListsRowDeleting != null)) {
                    this.DetailsListsRowDeleting(this, new DetailsListsRowChangeEvent(((DetailsListsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailsListsRow(DetailsListsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailsListsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailsListsContentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnItemID;
            
            private System.Data.DataColumn columnDetailsListID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnHeight;
            
            private System.Data.DataColumn columnWidth;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnMaterialID;
            
            private System.Data.DataColumn columnLeftEdgeID;
            
            private System.Data.DataColumn columnRightEdgeID;
            
            private System.Data.DataColumn columnTopEdgeID;
            
            private System.Data.DataColumn columnBottomEdgeID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsDataTable() {
                this.TableName = "DetailsListsContents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsListsContentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailsListsContentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DetailsListIDColumn {
                get {
                    return this.columnDetailsListID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeftEdgeIDColumn {
                get {
                    return this.columnLeftEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RightEdgeIDColumn {
                get {
                    return this.columnRightEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TopEdgeIDColumn {
                get {
                    return this.columnTopEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BottomEdgeIDColumn {
                get {
                    return this.columnBottomEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRow this[int index] {
                get {
                    return ((DetailsListsContentsRow)(this.Rows[index]));
                }
            }
            
            public event DetailsListsContentsRowChangeEventHandler DetailsListsContentsRowChanging;
            
            public event DetailsListsContentsRowChangeEventHandler DetailsListsContentsRowChanged;
            
            public event DetailsListsContentsRowChangeEventHandler DetailsListsContentsRowDeleting;
            
            public event DetailsListsContentsRowChangeEventHandler DetailsListsContentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailsListsContentsRow(DetailsListsContentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRow AddDetailsListsContentsRow(int ItemID, int DetailsListID, string Name, decimal Height, decimal Width, int Quantity, int MaterialID, int LeftEdgeID, int RightEdgeID, int TopEdgeID, int BottomEdgeID) {
                DetailsListsContentsRow rowDetailsListsContentsRow = ((DetailsListsContentsRow)(this.NewRow()));
                rowDetailsListsContentsRow.ItemArray = new object[] {
                        ItemID,
                        DetailsListID,
                        Name,
                        Height,
                        Width,
                        Quantity,
                        MaterialID,
                        LeftEdgeID,
                        RightEdgeID,
                        TopEdgeID,
                        BottomEdgeID};
                this.Rows.Add(rowDetailsListsContentsRow);
                return rowDetailsListsContentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRow FindByItemID(int ItemID) {
                return ((DetailsListsContentsRow)(this.Rows.Find(new object[] {
                            ItemID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DetailsListsContentsDataTable cln = ((DetailsListsContentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DetailsListsContentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemID = base.Columns["ItemID"];
                this.columnDetailsListID = base.Columns["DetailsListID"];
                this.columnName = base.Columns["Name"];
                this.columnHeight = base.Columns["Height"];
                this.columnWidth = base.Columns["Width"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnLeftEdgeID = base.Columns["LeftEdgeID"];
                this.columnRightEdgeID = base.Columns["RightEdgeID"];
                this.columnTopEdgeID = base.Columns["TopEdgeID"];
                this.columnBottomEdgeID = base.Columns["BottomEdgeID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemID = new System.Data.DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnDetailsListID = new System.Data.DataColumn("DetailsListID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailsListID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnHeight = new System.Data.DataColumn("Height", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnWidth = new System.Data.DataColumn("Width", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnMaterialID = new System.Data.DataColumn("MaterialID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnLeftEdgeID = new System.Data.DataColumn("LeftEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftEdgeID);
                this.columnRightEdgeID = new System.Data.DataColumn("RightEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRightEdgeID);
                this.columnTopEdgeID = new System.Data.DataColumn("TopEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopEdgeID);
                this.columnBottomEdgeID = new System.Data.DataColumn("BottomEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBottomEdgeID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnItemID}, true));
                this.columnItemID.AllowDBNull = false;
                this.columnItemID.Unique = true;
                this.columnDetailsListID.AllowDBNull = false;
                this.columnName.MaxLength = 10;
                this.columnHeight.AllowDBNull = false;
                this.columnWidth.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRow NewDetailsListsContentsRow() {
                return ((DetailsListsContentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DetailsListsContentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DetailsListsContentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailsListsContentsRowChanged != null)) {
                    this.DetailsListsContentsRowChanged(this, new DetailsListsContentsRowChangeEvent(((DetailsListsContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailsListsContentsRowChanging != null)) {
                    this.DetailsListsContentsRowChanging(this, new DetailsListsContentsRowChangeEvent(((DetailsListsContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailsListsContentsRowDeleted != null)) {
                    this.DetailsListsContentsRowDeleted(this, new DetailsListsContentsRowChangeEvent(((DetailsListsContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailsListsContentsRowDeleting != null)) {
                    this.DetailsListsContentsRowDeleting(this, new DetailsListsContentsRowChangeEvent(((DetailsListsContentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailsListsContentsRow(DetailsListsContentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailsListsContentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReferenceDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDetailID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnWidth;
            
            private System.Data.DataColumn columnHeight;
            
            private System.Data.DataColumn columnMaterialID;
            
            private System.Data.DataColumn columnLeftEdgeID;
            
            private System.Data.DataColumn columnRightEdgeID;
            
            private System.Data.DataColumn columnTopEdgeID;
            
            private System.Data.DataColumn columnBottomEdgeID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsDataTable() {
                this.TableName = "ReferenceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReferenceDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReferenceDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeftEdgeIDColumn {
                get {
                    return this.columnLeftEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RightEdgeIDColumn {
                get {
                    return this.columnRightEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TopEdgeIDColumn {
                get {
                    return this.columnTopEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BottomEdgeIDColumn {
                get {
                    return this.columnBottomEdgeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRow this[int index] {
                get {
                    return ((ReferenceDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ReferenceDetailsRowChangeEventHandler ReferenceDetailsRowChanging;
            
            public event ReferenceDetailsRowChangeEventHandler ReferenceDetailsRowChanged;
            
            public event ReferenceDetailsRowChangeEventHandler ReferenceDetailsRowDeleting;
            
            public event ReferenceDetailsRowChangeEventHandler ReferenceDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReferenceDetailsRow(ReferenceDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRow AddReferenceDetailsRow(string Name, decimal Width, decimal Height, int MaterialID, int LeftEdgeID, int RightEdgeID, int TopEdgeID, int BottomEdgeID) {
                ReferenceDetailsRow rowReferenceDetailsRow = ((ReferenceDetailsRow)(this.NewRow()));
                rowReferenceDetailsRow.ItemArray = new object[] {
                        null,
                        Name,
                        Width,
                        Height,
                        MaterialID,
                        LeftEdgeID,
                        RightEdgeID,
                        TopEdgeID,
                        BottomEdgeID};
                this.Rows.Add(rowReferenceDetailsRow);
                return rowReferenceDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRow FindByDetailID(int DetailID) {
                return ((ReferenceDetailsRow)(this.Rows.Find(new object[] {
                            DetailID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReferenceDetailsDataTable cln = ((ReferenceDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReferenceDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetailID = base.Columns["DetailID"];
                this.columnName = base.Columns["Name"];
                this.columnWidth = base.Columns["Width"];
                this.columnHeight = base.Columns["Height"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnLeftEdgeID = base.Columns["LeftEdgeID"];
                this.columnRightEdgeID = base.Columns["RightEdgeID"];
                this.columnTopEdgeID = base.Columns["TopEdgeID"];
                this.columnBottomEdgeID = base.Columns["BottomEdgeID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetailID = new System.Data.DataColumn("DetailID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnWidth = new System.Data.DataColumn("Width", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnHeight = new System.Data.DataColumn("Height", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnMaterialID = new System.Data.DataColumn("MaterialID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnLeftEdgeID = new System.Data.DataColumn("LeftEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftEdgeID);
                this.columnRightEdgeID = new System.Data.DataColumn("RightEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRightEdgeID);
                this.columnTopEdgeID = new System.Data.DataColumn("TopEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopEdgeID);
                this.columnBottomEdgeID = new System.Data.DataColumn("BottomEdgeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBottomEdgeID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDetailID}, true));
                this.columnDetailID.AutoIncrement = true;
                this.columnDetailID.AllowDBNull = false;
                this.columnDetailID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRow NewReferenceDetailsRow() {
                return ((ReferenceDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReferenceDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReferenceDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReferenceDetailsRowChanged != null)) {
                    this.ReferenceDetailsRowChanged(this, new ReferenceDetailsRowChangeEvent(((ReferenceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReferenceDetailsRowChanging != null)) {
                    this.ReferenceDetailsRowChanging(this, new ReferenceDetailsRowChangeEvent(((ReferenceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReferenceDetailsRowDeleted != null)) {
                    this.ReferenceDetailsRowDeleted(this, new ReferenceDetailsRowChangeEvent(((ReferenceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReferenceDetailsRowDeleting != null)) {
                    this.ReferenceDetailsRowDeleting(this, new ReferenceDetailsRowChangeEvent(((ReferenceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReferenceDetailsRow(ReferenceDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReferenceDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnLength;
            
            private System.Data.DataColumn columnWidth;
            
            private System.Data.DataColumn columnQuantity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsDataTable() {
                this.TableName = "Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow this[int index] {
                get {
                    return ((DetailsRow)(this.Rows[index]));
                }
            }
            
            public event DetailsRowChangeEventHandler DetailsRowChanging;
            
            public event DetailsRowChangeEventHandler DetailsRowChanged;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleting;
            
            public event DetailsRowChangeEventHandler DetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailsRow(DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow AddDetailsRow(string Name, string Length, string Width, int Quantity) {
                DetailsRow rowDetailsRow = ((DetailsRow)(this.NewRow()));
                rowDetailsRow.ItemArray = new object[] {
                        Name,
                        Length,
                        Width,
                        Quantity};
                this.Rows.Add(rowDetailsRow);
                return rowDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DetailsDataTable cln = ((DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnLength = base.Columns["Length"];
                this.columnWidth = base.Columns["Width"];
                this.columnQuantity = base.Columns["Quantity"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLength = new System.Data.DataColumn("Length", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnWidth = new System.Data.DataColumn("Width", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow NewDetailsRow() {
                return ((DetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailsRowChanged != null)) {
                    this.DetailsRowChanged(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailsRowChanging != null)) {
                    this.DetailsRowChanging(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailsRowDeleted != null)) {
                    this.DetailsRowDeleted(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailsRowDeleting != null)) {
                    this.DetailsRowDeleting(this, new DetailsRowChangeEvent(((DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailsRow(DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailsListsRow : System.Data.DataRow {
            
            private DetailsListsDataTable tableDetailsLists;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsListsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetailsLists = ((DetailsListsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetailsListID {
                get {
                    return ((int)(this[this.tableDetailsLists.DetailsListIDColumn]));
                }
                set {
                    this[this.tableDetailsLists.DetailsListIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableDetailsLists.RemarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Remarks\' in table \'DetailsLists\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsLists.RemarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsLists.OrderIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderID\' in table \'DetailsLists\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsLists.OrderIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableDetailsLists.RemarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableDetailsLists.RemarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderIDNull() {
                return this.IsNull(this.tableDetailsLists.OrderIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderIDNull() {
                this[this.tableDetailsLists.OrderIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailsListsContentsRow : System.Data.DataRow {
            
            private DetailsListsContentsDataTable tableDetailsListsContents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsListsContentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetailsListsContents = ((DetailsListsContentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ItemID {
                get {
                    return ((int)(this[this.tableDetailsListsContents.ItemIDColumn]));
                }
                set {
                    this[this.tableDetailsListsContents.ItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetailsListID {
                get {
                    return ((int)(this[this.tableDetailsListsContents.DetailsListIDColumn]));
                }
                set {
                    this[this.tableDetailsListsContents.DetailsListIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDetailsListsContents.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Height {
                get {
                    return ((decimal)(this[this.tableDetailsListsContents.HeightColumn]));
                }
                set {
                    this[this.tableDetailsListsContents.HeightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Width {
                get {
                    return ((decimal)(this[this.tableDetailsListsContents.WidthColumn]));
                }
                set {
                    this[this.tableDetailsListsContents.WidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    return ((int)(this[this.tableDetailsListsContents.QuantityColumn]));
                }
                set {
                    this[this.tableDetailsListsContents.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsListsContents.MaterialIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.MaterialIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeftEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsListsContents.LeftEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LeftEdgeID\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.LeftEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RightEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsListsContents.RightEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RightEdgeID\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.RightEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TopEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsListsContents.TopEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TopEdgeID\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.TopEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BottomEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableDetailsListsContents.BottomEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BottomEdgeID\' in table \'DetailsListsContents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetailsListsContents.BottomEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableDetailsListsContents.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableDetailsListsContents.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableDetailsListsContents.MaterialIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableDetailsListsContents.MaterialIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftEdgeIDNull() {
                return this.IsNull(this.tableDetailsListsContents.LeftEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftEdgeIDNull() {
                this[this.tableDetailsListsContents.LeftEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRightEdgeIDNull() {
                return this.IsNull(this.tableDetailsListsContents.RightEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRightEdgeIDNull() {
                this[this.tableDetailsListsContents.RightEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopEdgeIDNull() {
                return this.IsNull(this.tableDetailsListsContents.TopEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopEdgeIDNull() {
                this[this.tableDetailsListsContents.TopEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBottomEdgeIDNull() {
                return this.IsNull(this.tableDetailsListsContents.BottomEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBottomEdgeIDNull() {
                this[this.tableDetailsListsContents.BottomEdgeIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReferenceDetailsRow : System.Data.DataRow {
            
            private ReferenceDetailsDataTable tableReferenceDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReferenceDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReferenceDetails = ((ReferenceDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetailID {
                get {
                    return ((int)(this[this.tableReferenceDetails.DetailIDColumn]));
                }
                set {
                    this[this.tableReferenceDetails.DetailIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableReferenceDetails.NameColumn]));
                }
                set {
                    this[this.tableReferenceDetails.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Width {
                get {
                    try {
                        return ((decimal)(this[this.tableReferenceDetails.WidthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Width\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.WidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Height {
                get {
                    try {
                        return ((decimal)(this[this.tableReferenceDetails.HeightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Height\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.HeightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceDetails.MaterialIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.MaterialIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeftEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceDetails.LeftEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LeftEdgeID\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.LeftEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RightEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceDetails.RightEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RightEdgeID\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.RightEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TopEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceDetails.TopEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TopEdgeID\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.TopEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BottomEdgeID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceDetails.BottomEdgeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BottomEdgeID\' in table \'ReferenceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceDetails.BottomEdgeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableReferenceDetails.WidthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableReferenceDetails.WidthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableReferenceDetails.HeightColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableReferenceDetails.HeightColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableReferenceDetails.MaterialIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableReferenceDetails.MaterialIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftEdgeIDNull() {
                return this.IsNull(this.tableReferenceDetails.LeftEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftEdgeIDNull() {
                this[this.tableReferenceDetails.LeftEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRightEdgeIDNull() {
                return this.IsNull(this.tableReferenceDetails.RightEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRightEdgeIDNull() {
                this[this.tableReferenceDetails.RightEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopEdgeIDNull() {
                return this.IsNull(this.tableReferenceDetails.TopEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopEdgeIDNull() {
                this[this.tableReferenceDetails.TopEdgeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBottomEdgeIDNull() {
                return this.IsNull(this.tableReferenceDetails.BottomEdgeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBottomEdgeIDNull() {
                this[this.tableReferenceDetails.BottomEdgeIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailsRow : System.Data.DataRow {
            
            private DetailsDataTable tableDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetails = ((DetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDetails.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableDetails.LengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Length\' in table \'Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.LengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Width {
                get {
                    try {
                        return ((string)(this[this.tableDetails.WidthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Width\' in table \'Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.WidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableDetails.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Quantity\' in table \'Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetails.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableDetails.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableDetails.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableDetails.LengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableDetails.LengthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableDetails.WidthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableDetails.WidthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableDetails.QuantityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableDetails.QuantityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailsListsRowChangeEvent : System.EventArgs {
            
            private DetailsListsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRowChangeEvent(DetailsListsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailsListsContentsRowChangeEvent : System.EventArgs {
            
            private DetailsListsContentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRowChangeEvent(DetailsListsContentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsListsContentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReferenceDetailsRowChangeEvent : System.EventArgs {
            
            private ReferenceDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRowChangeEvent(ReferenceDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferenceDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailsRowChangeEvent : System.EventArgs {
            
            private DetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRowChangeEvent(DetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Denisenko.Cutting.CutOptima.DataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DetailsListsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DetailsListsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DetailsLists";
            tableMapping.ColumnMappings.Add("DetailsListID", "DetailsListID");
            tableMapping.ColumnMappings.Add("Remarks", "Remarks");
            tableMapping.ColumnMappings.Add("OrderID", "OrderID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DetailsLists] WHERE (([DetailsListID] = @Original_DetailsListI" +
                "D) AND ((@IsNull_OrderID = 1 AND [OrderID] IS NULL) OR ([OrderID] = @Original_Or" +
                "derID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailsListID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DetailsLists] ([DetailsListID], [Remarks], [OrderID]) VALUES (" +
                "@DetailsListID, @Remarks, @OrderID);\r\nSELECT DetailsListID, Remarks, OrderID FRO" +
                "M DetailsLists WHERE (DetailsListID = @DetailsListID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailsListID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Remarks", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Remarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DetailsLists] SET [DetailsListID] = @DetailsListID, [Remarks] = @Remarks, [OrderID] = @OrderID WHERE (([DetailsListID] = @Original_DetailsListID) AND ((@IsNull_OrderID = 1 AND [OrderID] IS NULL) OR ([OrderID] = @Original_OrderID)));
SELECT DetailsListID, Remarks, OrderID FROM DetailsLists WHERE (DetailsListID = @DetailsListID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailsListID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Remarks", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Remarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailsListID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrderID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Denisenko.Cutting.CutOptima.Properties.Settings.Default.OrdersConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DetailsListID, Remarks, OrderID FROM dbo.DetailsLists";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.DetailsListsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.DetailsListsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.DetailsListsDataTable dataTable = new DataSet.DetailsListsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.DetailsListsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "DetailsLists");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DetailsListID, System.Nullable<int> Original_OrderID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DetailsListID));
            if ((Original_OrderID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_OrderID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DetailsListID, string Remarks, System.Nullable<int> OrderID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DetailsListID));
            if ((Remarks == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Remarks));
            }
            if ((OrderID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(OrderID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int DetailsListID, string Remarks, System.Nullable<int> OrderID, int Original_DetailsListID, System.Nullable<int> Original_OrderID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DetailsListID));
            if ((Remarks == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Remarks));
            }
            if ((OrderID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(OrderID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_DetailsListID));
            if ((Original_OrderID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_OrderID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DetailsListsContentsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DetailsListsContentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DetailsListsContents";
            tableMapping.ColumnMappings.Add("ItemID", "ItemID");
            tableMapping.ColumnMappings.Add("DetailsListID", "DetailsListID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("Width", "Width");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("MaterialID", "MaterialID");
            tableMapping.ColumnMappings.Add("LeftEdgeID", "LeftEdgeID");
            tableMapping.ColumnMappings.Add("RightEdgeID", "RightEdgeID");
            tableMapping.ColumnMappings.Add("TopEdgeID", "TopEdgeID");
            tableMapping.ColumnMappings.Add("BottomEdgeID", "BottomEdgeID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DetailsListsContents] WHERE (([ItemID] = @Original_ItemID) AND ([DetailsListID] = @Original_DetailsListID) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND ([Height] = @Original_Height) AND ([Width] = @Original_Width) AND ([Quantity] = @Original_Quantity) AND ((@IsNull_MaterialID = 1 AND [MaterialID] IS NULL) OR ([MaterialID] = @Original_MaterialID)) AND ((@IsNull_LeftEdgeID = 1 AND [LeftEdgeID] IS NULL) OR ([LeftEdgeID] = @Original_LeftEdgeID)) AND ((@IsNull_RightEdgeID = 1 AND [RightEdgeID] IS NULL) OR ([RightEdgeID] = @Original_RightEdgeID)) AND ((@IsNull_TopEdgeID = 1 AND [TopEdgeID] IS NULL) OR ([TopEdgeID] = @Original_TopEdgeID)) AND ((@IsNull_BottomEdgeID = 1 AND [BottomEdgeID] IS NULL) OR ([BottomEdgeID] = @Original_BottomEdgeID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ItemID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailsListID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Height", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Quantity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Quantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO DetailsListsContents
               (DetailsListID, Name, Height, Width, Quantity, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID)
VALUES  (@DetailsListID,@Name,@Height,@Width,@Quantity,@MaterialID,@LeftEdgeID,@RightEdgeID,@TopEdgeID,@BottomEdgeID);  
SELECT ItemID, DetailsListID, Name, Height, Width, Quantity, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID FROM DetailsListsContents WHERE (ItemID = @ItemID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailsListID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Height", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaterialID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeftEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RightEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TopEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BottomEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ItemID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ItemID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE DetailsListsContents
SET        DetailsListID = @DetailsListID, Name = @Name, Height = @Height, Width = @Width, Quantity = @Quantity, MaterialID = @MaterialID, LeftEdgeID = @LeftEdgeID, 
               RightEdgeID = @RightEdgeID, TopEdgeID = @TopEdgeID, BottomEdgeID = @BottomEdgeID
WHERE  (ItemID = @Original_ItemID) AND (DetailsListID = @Original_DetailsListID) AND (@IsNull_Name = 1 AND Name IS NULL OR
               Name = @Original_Name) AND (Height = @Original_Height) AND (Width = @Original_Width) AND (Quantity = @Original_Quantity) AND (@IsNull_MaterialID = 1 AND 
               MaterialID IS NULL OR
               MaterialID = @Original_MaterialID) AND (@IsNull_LeftEdgeID = 1 AND LeftEdgeID IS NULL OR
               LeftEdgeID = @Original_LeftEdgeID) AND (@IsNull_RightEdgeID = 1 AND RightEdgeID IS NULL OR
               RightEdgeID = @Original_RightEdgeID) AND (@IsNull_TopEdgeID = 1 AND TopEdgeID IS NULL OR
               TopEdgeID = @Original_TopEdgeID) AND (@IsNull_BottomEdgeID = 1 AND BottomEdgeID IS NULL OR
               BottomEdgeID = @Original_BottomEdgeID); 
SELECT ItemID, DetailsListID, Name, Height, Width, Quantity, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID FROM DetailsListsContents WHERE (ItemID = @ItemID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailsListID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Height", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaterialID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeftEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RightEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TopEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BottomEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ItemID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailsListID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DetailsListID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Name", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Height", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Quantity", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Quantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaterialID", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaterialID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LeftEdgeID", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeftEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RightEdgeID", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RightEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TopEdgeID", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TopEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BottomEdgeID", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BottomEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ItemID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ItemID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Denisenko.Cutting.CutOptima.Properties.Settings.Default.OrdersConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ItemID, DetailsListID, Name, Height, Width, Quantity, MaterialID, LeftEdge" +
                "ID, RightEdgeID, TopEdgeID, BottomEdgeID FROM dbo.DetailsListsContents";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.DetailsListsContentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.DetailsListsContentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.DetailsListsContentsDataTable dataTable = new DataSet.DetailsListsContentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.DetailsListsContentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "DetailsListsContents");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ItemID, int Original_DetailsListID, string Original_Name, decimal Original_Height, decimal Original_Width, int Original_Quantity, System.Nullable<int> Original_MaterialID, System.Nullable<int> Original_LeftEdgeID, System.Nullable<int> Original_RightEdgeID, System.Nullable<int> Original_TopEdgeID, System.Nullable<int> Original_BottomEdgeID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ItemID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_DetailsListID));
            if ((Original_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Height));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Width));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Quantity));
            if ((Original_MaterialID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_MaterialID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_LeftEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_LeftEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_RightEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_RightEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_TopEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_TopEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_BottomEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_BottomEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DetailsListID, string Name, decimal Height, decimal Width, int Quantity, System.Nullable<int> MaterialID, System.Nullable<int> LeftEdgeID, System.Nullable<int> RightEdgeID, System.Nullable<int> TopEdgeID, System.Nullable<int> BottomEdgeID, int ItemID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DetailsListID));
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Height));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Width));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Quantity));
            if ((MaterialID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(MaterialID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((LeftEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(LeftEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RightEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(RightEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((TopEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(TopEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((BottomEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(BottomEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(ItemID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int DetailsListID, 
                    string Name, 
                    decimal Height, 
                    decimal Width, 
                    int Quantity, 
                    System.Nullable<int> MaterialID, 
                    System.Nullable<int> LeftEdgeID, 
                    System.Nullable<int> RightEdgeID, 
                    System.Nullable<int> TopEdgeID, 
                    System.Nullable<int> BottomEdgeID, 
                    int Original_ItemID, 
                    int Original_DetailsListID, 
                    string IsNull_Name, 
                    string Original_Name, 
                    decimal Original_Height, 
                    decimal Original_Width, 
                    int Original_Quantity, 
                    string IsNull_MaterialID, 
                    System.Nullable<int> Original_MaterialID, 
                    string IsNull_LeftEdgeID, 
                    System.Nullable<int> Original_LeftEdgeID, 
                    string IsNull_RightEdgeID, 
                    System.Nullable<int> Original_RightEdgeID, 
                    string IsNull_TopEdgeID, 
                    System.Nullable<int> Original_TopEdgeID, 
                    string IsNull_BottomEdgeID, 
                    System.Nullable<int> Original_BottomEdgeID, 
                    int ItemID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DetailsListID));
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Height));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Width));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Quantity));
            if ((MaterialID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(MaterialID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((LeftEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(LeftEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RightEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(RightEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((TopEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(TopEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((BottomEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(BottomEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ItemID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_DetailsListID));
            if ((IsNull_Name == null)) {
                throw new System.ArgumentNullException("IsNull_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(IsNull_Name));
            }
            if ((Original_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Height));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_Width));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Quantity));
            if ((IsNull_MaterialID == null)) {
                throw new System.ArgumentNullException("IsNull_MaterialID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(IsNull_MaterialID));
            }
            if ((Original_MaterialID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_MaterialID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((IsNull_LeftEdgeID == null)) {
                throw new System.ArgumentNullException("IsNull_LeftEdgeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(IsNull_LeftEdgeID));
            }
            if ((Original_LeftEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_LeftEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((IsNull_RightEdgeID == null)) {
                throw new System.ArgumentNullException("IsNull_RightEdgeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(IsNull_RightEdgeID));
            }
            if ((Original_RightEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_RightEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((IsNull_TopEdgeID == null)) {
                throw new System.ArgumentNullException("IsNull_TopEdgeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(IsNull_TopEdgeID));
            }
            if ((Original_TopEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_TopEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((IsNull_BottomEdgeID == null)) {
                throw new System.ArgumentNullException("IsNull_BottomEdgeID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(IsNull_BottomEdgeID));
            }
            if ((Original_BottomEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_BottomEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(ItemID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReferenceDetailsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReferenceDetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReferenceDetails";
            tableMapping.ColumnMappings.Add("DetailID", "DetailID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Width", "Width");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("MaterialID", "MaterialID");
            tableMapping.ColumnMappings.Add("LeftEdgeID", "LeftEdgeID");
            tableMapping.ColumnMappings.Add("RightEdgeID", "RightEdgeID");
            tableMapping.ColumnMappings.Add("TopEdgeID", "TopEdgeID");
            tableMapping.ColumnMappings.Add("BottomEdgeID", "BottomEdgeID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ReferenceDetails] WHERE (([DetailID] = @Original_DetailID) AND ([Name] = @Original_Name) AND ((@IsNull_Width = 1 AND [Width] IS NULL) OR ([Width] = @Original_Width)) AND ((@IsNull_Height = 1 AND [Height] IS NULL) OR ([Height] = @Original_Height)) AND ((@IsNull_MaterialID = 1 AND [MaterialID] IS NULL) OR ([MaterialID] = @Original_MaterialID)) AND ((@IsNull_LeftEdgeID = 1 AND [LeftEdgeID] IS NULL) OR ([LeftEdgeID] = @Original_LeftEdgeID)) AND ((@IsNull_RightEdgeID = 1 AND [RightEdgeID] IS NULL) OR ([RightEdgeID] = @Original_RightEdgeID)) AND ((@IsNull_TopEdgeID = 1 AND [TopEdgeID] IS NULL) OR ([TopEdgeID] = @Original_TopEdgeID)) AND ((@IsNull_BottomEdgeID = 1 AND [BottomEdgeID] IS NULL) OR ([BottomEdgeID] = @Original_BottomEdgeID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Height", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Height", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Height", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ReferenceDetails
               (Name, Width, Height, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID)
VALUES  (@Name,@Width,@Height,@MaterialID,@LeftEdgeID,@RightEdgeID,@TopEdgeID,@BottomEdgeID); 
SELECT DetailID, Name, Width, Height, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID FROM ReferenceDetails WHERE (DetailID = @DetailID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Height", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaterialID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeftEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RightEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TopEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BottomEdgeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DetailID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ReferenceDetails] SET [DetailID] = @DetailID, [Name] = @Name, [Width] = @Width, [Height] = @Height, [MaterialID] = @MaterialID, [LeftEdgeID] = @LeftEdgeID, [RightEdgeID] = @RightEdgeID, [TopEdgeID] = @TopEdgeID, [BottomEdgeID] = @BottomEdgeID WHERE (([DetailID] = @Original_DetailID) AND ([Name] = @Original_Name) AND ((@IsNull_Width = 1 AND [Width] IS NULL) OR ([Width] = @Original_Width)) AND ((@IsNull_Height = 1 AND [Height] IS NULL) OR ([Height] = @Original_Height)) AND ((@IsNull_MaterialID = 1 AND [MaterialID] IS NULL) OR ([MaterialID] = @Original_MaterialID)) AND ((@IsNull_LeftEdgeID = 1 AND [LeftEdgeID] IS NULL) OR ([LeftEdgeID] = @Original_LeftEdgeID)) AND ((@IsNull_RightEdgeID = 1 AND [RightEdgeID] IS NULL) OR ([RightEdgeID] = @Original_RightEdgeID)) AND ((@IsNull_TopEdgeID = 1 AND [TopEdgeID] IS NULL) OR ([TopEdgeID] = @Original_TopEdgeID)) AND ((@IsNull_BottomEdgeID = 1 AND [BottomEdgeID] IS NULL) OR ([BottomEdgeID] = @Original_BottomEdgeID)));
SELECT DetailID, Name, Width, Height, MaterialID, LeftEdgeID, RightEdgeID, TopEdgeID, BottomEdgeID FROM ReferenceDetails WHERE (DetailID = @DetailID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DetailID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Height", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DetailID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DetailID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Height", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Height", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Height", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "Height", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaterialID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaterialID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LeftEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LeftEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RightEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RightEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TopEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TopEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BottomEdgeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BottomEdgeID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Denisenko.Cutting.CutOptima.Properties.Settings.Default.OrdersConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DetailID, Name, Width, Height, MaterialID, LeftEdgeID, RightEdgeID, TopEdg" +
                "eID, BottomEdgeID FROM dbo.ReferenceDetails";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.ReferenceDetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.ReferenceDetailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.ReferenceDetailsDataTable dataTable = new DataSet.ReferenceDetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.ReferenceDetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReferenceDetails");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DetailID, string Original_Name, System.Nullable<decimal> Original_Width, System.Nullable<decimal> Original_Height, System.Nullable<int> Original_MaterialID, System.Nullable<int> Original_LeftEdgeID, System.Nullable<int> Original_RightEdgeID, System.Nullable<int> Original_TopEdgeID, System.Nullable<int> Original_BottomEdgeID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DetailID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_Width.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_Width.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_Height.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Height.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_MaterialID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_MaterialID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_LeftEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_LeftEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_RightEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_RightEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_TopEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_TopEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_BottomEdgeID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_BottomEdgeID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, System.Nullable<decimal> Width, System.Nullable<decimal> Height, System.Nullable<int> MaterialID, System.Nullable<int> LeftEdgeID, System.Nullable<int> RightEdgeID, System.Nullable<int> TopEdgeID, System.Nullable<int> BottomEdgeID, int DetailID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Width.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Width.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((MaterialID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(MaterialID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((LeftEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(LeftEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((RightEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(RightEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((TopEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(TopEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((BottomEdgeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(BottomEdgeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(DetailID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int DetailID, 
                    string Name, 
                    System.Nullable<decimal> Width, 
                    System.Nullable<decimal> Height, 
                    System.Nullable<int> MaterialID, 
                    System.Nullable<int> LeftEdgeID, 
                    System.Nullable<int> RightEdgeID, 
                    System.Nullable<int> TopEdgeID, 
                    System.Nullable<int> BottomEdgeID, 
                    int Original_DetailID, 
                    string Original_Name, 
                    System.Nullable<decimal> Original_Width, 
                    System.Nullable<decimal> Original_Height, 
                    System.Nullable<int> Original_MaterialID, 
                    System.Nullable<int> Original_LeftEdgeID, 
                    System.Nullable<int> Original_RightEdgeID, 
                    System.Nullable<int> Original_TopEdgeID, 
                    System.Nullable<int> Original_BottomEdgeID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DetailID));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Width.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Width.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Height.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((MaterialID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(MaterialID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((LeftEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(LeftEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((RightEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(RightEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((TopEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(TopEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((BottomEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(BottomEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_DetailID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Name));
            }
            if ((Original_Width.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_Width.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_Height.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Height.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_MaterialID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_MaterialID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_LeftEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_LeftEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_RightEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_RightEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_TopEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_TopEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_BottomEdgeID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_BottomEdgeID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591