// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Denisenko.Cutting.Converting;
using Denisenko.Cutting;
using Denisenko.Cutting.LC4;
namespace TestProject
{
	/// <summary>
	///This is a test class for Denisenko.Cutting.Converting.LC4Convertor and is intended
	///to contain all Denisenko.Cutting.Converting.LC4Convertor Unit Tests
	///</summary>
	[TestClass()]
	public class LC4ConvertorTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion

		/// <summary>
		///A test for AddSections (LC4SectionsCollection, SectionsCollection)
		///</summary>
		[DeploymentItem("CuttingConvertors.dll")]
		[TestMethod()]
		public void AddSectionsTest()
		{
			LC4Convertor target = new LC4Convertor();

			TestProject.Denisenko_Cutting_Converting_LC4ConvertorAccessor accessor = new TestProject.Denisenko_Cutting_Converting_LC4ConvertorAccessor(target);

			List<LC4Section> into = null; // TODO: Initialize to an appropriate value

			List<Section> sections = null; // TODO: Initialize to an appropriate value

			accessor.AddSections(into, sections);

			Assert.Inconclusive("A method that does not return a value cannot be verified.");
		}

		/// <summary>
		///A test for ConvertSection (Section, Section)
		///</summary>
		[DeploymentItem("CuttingConvertors.dll")]
		[TestMethod()]
		public void ConvertSectionTest()
		{
			LC4Convertor target = new LC4Convertor();

			TestProject.Denisenko_Cutting_Converting_LC4ConvertorAccessor accessor = new TestProject.Denisenko_Cutting_Converting_LC4ConvertorAccessor(target);

			ParametersCollection parameters = new ParametersCollection();
			parameters.CutterThickness = 10M;
			CuttingScheme scheme = new CuttingScheme();
			scheme.Width = 1000M;
			scheme.Height = 1000M;
			scheme.Parameters = parameters;
			Section someSection = null;
			scheme.Cut(scheme.RootSection, 20M, CutType.Vertical, out someSection);

			Section prevSection = null;
			Section input = scheme.RootSection.NestedSections[0];
			Section cut = scheme.RootSection.NestedSections[1];

			LC4Section expected = new LC4Section();
			expected.Size = LC4Numeric.FromNonScaled(30);
			expected.SectionType = LC4SectionType.Anschnitt;
			LC4Section actual;

			actual = accessor.ConvertSection(input, prevSection, cut);

			Assert.AreEqual<LC4Section>(expected, actual, "Denisenko.Cutting.Converting.LC4Convertor.ConvertSection did not return the expec" +
					"ted value.");
			Assert.Inconclusive("Verify the correctness of this test method.");
		}

		/// <summary>
		///A test for LC4Convertor ()
		///</summary>
		[TestMethod()]
		public void ConstructorTest()
		{
			LC4Convertor target = new LC4Convertor();

			// TODO: Implement code to verify target
			Assert.Inconclusive("TODO: Implement code to verify target");
		}

		/// <summary>
		///A test for NumericFromDecimal (decimal)
		///</summary>
		[DeploymentItem("CuttingConvertors.dll")]
		[TestMethod()]
		public void NumericFromDecimalTest()
		{
			decimal value = 0.1M; // TODO: Initialize to an appropriate value

			LC4Numeric expected = LC4Numeric.FromScaled(10000);
			LC4Numeric actual;

			actual = TestProject.Denisenko_Cutting_Converting_LC4ConvertorAccessor.NumericFromDecimal(value);

			Assert.AreEqual(expected, actual, "Denisenko.Cutting.Converting.LC4Convertor.NumericFromDecimal did not return the e" +
					"xpected value.");
		}
	}


}
